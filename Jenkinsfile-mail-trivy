@Library('my-shared-lib') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'DockerHubUser', description: "dockerHub UserName", defaultValue: 'ar7u4')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }
    environment{
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
    stages{
         
        stage('Git Checkout'){
                   when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/ar7u4/new-jenkins-shared-lib.git"
            )
            }
        }
        // stage('Docker Image Build'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
        //        }
        //     }
        // }
        //  stage('Docker Image Scan: trivy '){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
        //        }
        //     }
        // }

    }
    post {
        success {
            script {
                def gitLogs = sh(script: 'git log -4 --pretty=format:"%h %an %s"', returnStdout: true).trim()
				emailext (
				subject: "Build Success: ${currentBuild.fullDisplayName}",
				body: "Build ${currentBuild.fullDisplayName} succeeded.\n Pipeline triggered by ${env.BUILD_USER}.\n Here are the last 5 git logs:\n\n${gitLogs}.\n Console output is attached.",
				to: 'arjun.betageri@live.com',
				attachmentsPattern: '**/*.log',
                )
            }
             
        }
        failure {
            script {
                def gitLogs = sh(script: 'git log -4 --pretty=format:"%h %an %s"', returnStdout: true).trim()
				emailext (
				subject: "Build Success: ${currentBuild.fullDisplayName}",
				body: "Build ${currentBuild.fullDisplayName} succeeded.\n Pipeline triggered by ${env.BUILD_USER}.\n Here are the last 5 git logs:\n\n${gitLogs}.\n Console output is attached.",
				to: 'arjun.betageri@live.com',
				attachmentsPattern: '**/*.log',
                )
            }
        }
    }
}