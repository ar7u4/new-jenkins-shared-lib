@Library('my-shared-lib') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'DockerHubUser', description: "dockerHub UserName", defaultValue: 'ar7u4')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }
    environment{
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
    stages{
         
        stage('Git Checkout'){
                   when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/ar7u4/new-jenkins-shared-lib.git"
            )
            }
        }
        //  stage('Unit Test maven'){
         
        // when { expression {  params.action == 'create' } }
        
        //     steps{
        //        script {
        //             mvnTest()
        //         } 
                  
        //     }
        // }
        // stage('Integration Test maven'){
         
        // when { expression {  params.action == 'create' } }

        //     steps{
        //        script{
        //             mvnIntegrationTest()
        //         }                   
        //     }
        // }
        
        // stage('Static Code Analysis: Sonar'){
         
        // when { expression {  params.action == 'create' } }

        //     steps{
        //        script{
        //             statiCodeAnalysis()
        //         }                   
        //     }
        // }
        // stage('Quality Gate Status Check : Sonarqube'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            def SonarQubecredentialsId = 'sonar-token-new'
        //            QualityGateStatus(SonarQubecredentialsId)
        //        }
        //     }
        // }
        // stage('maven Build: maven'){
         
        // when { expression {  params.action == 'create' } }

        //     steps{
        //        script{
        //             mvnBuild()
        //         }                   
        //     }
        // }
        stage('Docker Image Build'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }
         stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }
        post {
        success {
            script {
                def duration = currentBuild.duration
                emailext (
                    subject: "Build Successful",
                    body: "The build succeeded! It took ${duration} milliseconds to finish all stages.",
                    to: 'am.betageri@yahoo.com','sachinkd.cs@gmail.com'
                )
            }
        }
        }
        failure {
            script {
                def buildNumber = currentBuild.number
                def failedStage = currentBuild.currentBuild.displayName
                def errorMessage = currentBuild.currentBuild.currentResult.toString()
                emailext (
                    subject: "Build Failure",
                    body: "Build #${buildNumber} failed in stage: ${failedStage}\nError Message: ${errorMessage}",
                    to: 'am.betageri@yahoo.com','sachinkd.cs@gmail.com'
                )
            }
        }
        // stage('Docker Image Push : DockerHub '){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerImagePush("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
        //        }
        //     }
        // }   
        // stage('Docker Image Cleanup : DockerHub '){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerImageCleanup("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
        //        }
        //     }
        // }
        // stage('Create EKS Cluster : Terraform'){
        //     when { expression {  params.action == 'create' } }
        //     steps{
        //         script{

        //             dir('eks_module') {
        //               sh """
                          
        //                   terraform init                          
        //                   terraform destroy -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve 
                         
        //               """
        //           }
        //         }
        //     }
        // }
        // stage('Connect to EKS '){
        //     when { expression {  params.action == 'create' } }
        // steps{

        //     script{

        //         sh """
        //         aws configure set aws_access_key_id "$ACCESS_KEY"
        //         aws configure set aws_secret_access_key "$SECRET_KEY"
        //         aws configure set region "${params.Region}"
        //         aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
        //         """
        //     }
        // }
        // } 
        // stage('Deployment on EKS Cluster'){
        //     when { expression {  params.action == 'create' } }
        //     steps{
        //         script{
                  
        //           def apply = false

        //           try{
        //             input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
        //             apply = true
        //           }catch(err){
        //             apply= false
        //             currentBuild.result  = 'UNSTABLE'
        //           }
        //           if(apply){

        //             sh 'sed -i -e "s,client.authentication.k8s.io/v1alpha1,client.authentication.k8s.io/v1beta1,g" ~/.kube/config'
        //             sh 'kubectl apply -f .'
                    
        //           }
        //         }
        //     }
        // } 

    }

}
